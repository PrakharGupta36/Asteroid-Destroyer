/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: VM-Models (https://sketchfab.com/vm-models)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/gas-giant-aa328c29ddb94b6db32e44a1c2bf6993
Title: Gas Giant
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { JSX, useRef } from "react";
import * as THREE from "three";

type GLTFResult_GasGiant = {
  nodes: {
    gas_giant_gas_giant_mat_0: THREE.Mesh;
    gas_giant_rings_mat_0: THREE.Mesh;
  };
  materials: {
    gas_giant_mat: THREE.Material;
    rings_mat: THREE.Material;
  };
};

function GasGiant(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/Gas_Giant.glb"
  ) as unknown as GLTFResult_GasGiant;

  const ref = useRef<THREE.Group>(null);

  useFrame(({ clock }) => {
    if (ref.current) {
      ref.current.rotation.z = clock.getElapsedTime() * 0.2;

      ref.current.position.z = -clock.getElapsedTime() * 0.05;
    }
  });

  return (
    <group
      {...props}
      dispose={null}
      position={[-800, 500, -1500]}
      scale={30}
      rotation={[0, 2, 0]}
    >
      <group rotation={[-Math.PI / 2, -0.373, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group ref={ref} rotation={[-Math.PI / 2, 0, 0]}>
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.gas_giant_gas_giant_mat_0.geometry}
              material={materials.gas_giant_mat}
            />
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.gas_giant_rings_mat_0.geometry}
              material={materials.rings_mat}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: creative3d (https://sketchfab.com/creative.3d)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/terrestrial-planet-or-exo-planet-b15fcf8a65f64119a399bb5ecfc77ea3
Title: terrestrial planet or exo planet
*/

type GLTFResult_ExoPlanet = {
  nodes: {
    Sphere_Material002_0: THREE.Mesh;
    Sphere_Material002_0_1: THREE.Mesh;
  };
  materials: {
    ["Material.002"]: THREE.Material;
  };
};

export function ExoPlanet(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "ExoPlanet/scene.gltf"
  ) as unknown as GLTFResult_ExoPlanet;

  const ref = useRef<THREE.Mesh>(null);

  useFrame(({ clock }) => {
    if (ref.current) {
      ref.current.rotation.z = clock.getElapsedTime() * 0.1;

      ref.current.position.z = clock.getElapsedTime() * 0.2;
    }
  });

  return (
    <group
      {...props}
      dispose={null}
      position={[800, 300, -1500]}
      scale={0.45}
      rotation={[0, 1.5, 0]}
    >
      <group
        ref={ref}
        rotation={[-1.406, -0.007, -1.383]}
        scale={[234.933, 234.934, 234.934]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere_Material002_0.geometry}
          material={materials["Material.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere_Material002_0_1.geometry}
          material={materials["Material.002"]}
        />
      </group>
    </group>
  );
}

export default function DistantPlanets() {
  return (
    <>
      <GasGiant />
      <ExoPlanet />
    </>
  );
}

useGLTF.preload("/Gas_Giant.glb");
useGLTF.preload("/ExoPlanet/scene.gltf");
