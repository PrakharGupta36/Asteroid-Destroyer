/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: gerardabello (https://sketchfab.com/gerardabello)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/asteroid-04a7fdda5dfe4f8fb16d1c2fa8b1bf52
Title: Asteroid
*/

import { useGLTF } from "@react-three/drei";
import {
  RigidBody,
  RigidBodyProps,
  RapierRigidBody,
} from "@react-three/rapier";
import { useFrame } from "@react-three/fiber";
import { useRef } from "react";
import * as THREE from "three";

type GLTFResult = {
  nodes: {
    Object_2: THREE.Mesh;
  };
  materials: {
    ["Material.003"]: THREE.Material;
  };
};

export default function Asteroid(props: RigidBodyProps) {
  const { nodes, materials } = useGLTF(
    "/Asteroid.glb"
  ) as unknown as GLTFResult;
  const asteroidRef = useRef<RapierRigidBody>(null);

  useFrame(() => {
    if (asteroidRef.current) {
      const position = asteroidRef.current.translation();
      const force = new THREE.Vector3(-position.x, -position.y, -position.z); // Pull towards center
      force.normalize().multiplyScalar(0.09);

      asteroidRef.current.applyImpulse(force, true);

      const rotationForce = new THREE.Vector3(
        Math.random() * 0.02 - 0.01,
        Math.random() * 0.02 - 0.01,
        Math.random() * 0.02 - 0.01
      );

      asteroidRef.current.applyTorqueImpulse(rotationForce, true);
    }
  });

  return (
    <>
      <RigidBody
        ref={asteroidRef}
        type='dynamic'
        mass={1}
        canSleep={false} // Keep it active
        linearDamping={0} // No air resistance
        angularDamping={0} // No rotation resistance
        {...props}
      >
        <group dispose={null}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object_2.geometry}
            material={materials["Material.003"]}
            rotation={[0, 0, 0]}
          />
        </group>
      </RigidBody>
    </>
  );
}

useGLTF.preload("/Asteroid.glb");
